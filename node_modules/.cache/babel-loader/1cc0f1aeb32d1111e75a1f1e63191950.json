{"ast":null,"code":"import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createRootReducer from './reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from '@redux-saga/core';\nimport rootSaga from './sagas';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage/session';\nexport const history = createBrowserHistory();\nconst composeEnhancers = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nexport default function configureStore(preloadedState) {\n  const sagaMiddleware = createSagaMiddleware();\n  const persistedReducer = persistReducer(persistConfig, createRootReducer(history));\n  const store = createStore(persistedReducer, // root reducer with router state\n  preloadedState, composeEnhancers(applyMiddleware(routerMiddleware(history), // for dispatching history actions\n  thunk, sagaMiddleware // ... other middlewares ...\n  )));\n  const persistor = persistStore(store);\n  sagaMiddleware.run(rootSaga);\n  return {\n    store,\n    persistor\n  };\n}","map":{"version":3,"sources":["D:/PowerGate/Validate-useform/src/redux/configureStore.ts"],"names":["routerMiddleware","createBrowserHistory","applyMiddleware","compose","createStore","createRootReducer","thunk","createSagaMiddleware","rootSaga","persistStore","persistReducer","storage","history","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","persistConfig","key","configureStore","preloadedState","sagaMiddleware","persistedReducer","store","persistor","run"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,wBAAjC;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,iBAAP,MAA8B,WAA9B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,mCAApB;AAEA,OAAO,MAAMC,OAAO,GAAGX,oBAAoB,EAApC;AAEP,MAAMY,gBAAgB,GACnB,OAAOC,MAAP,KAAkB,WAAlB,IACEA,MAAD,CAAgBC,oCADlB,IAEAZ,OAHF;AAKA,MAAMa,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBN,EAAAA;AAFoB,CAAtB;AAKA,eAAe,SAASO,cAAT,CAAwBC,cAAxB,EAA6C;AAC1D,QAAMC,cAAc,GAAGb,oBAAoB,EAA3C;AAEA,QAAMc,gBAAgB,GAAGX,cAAc,CACrCM,aADqC,EAErCX,iBAAiB,CAACO,OAAD,CAFoB,CAAvC;AAKA,QAAMU,KAAK,GAAGlB,WAAW,CACvBiB,gBADuB,EACL;AAClBF,EAAAA,cAFuB,EAGvBN,gBAAgB,CACdX,eAAe,CACbF,gBAAgB,CAACY,OAAD,CADH,EACc;AAC3BN,EAAAA,KAFa,EAGbc,cAHa,CAIb;AAJa,GADD,CAHO,CAAzB;AAaA,QAAMG,SAAS,GAAGd,YAAY,CAACa,KAAD,CAA9B;AAEAF,EAAAA,cAAc,CAACI,GAAf,CAAmBhB,QAAnB;AAEA,SAAO;AAAEc,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD","sourcesContent":["import { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createRootReducer from './reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from '@redux-saga/core';\nimport rootSaga from './sagas';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage/session';\n\nexport const history = createBrowserHistory();\n\nconst composeEnhancers =\n  (typeof window !== 'undefined' &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nexport default function configureStore(preloadedState: any) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const persistedReducer = persistReducer(\n    persistConfig,\n    createRootReducer(history),\n  );\n\n  const store = createStore(\n    persistedReducer, // root reducer with router state\n    preloadedState,\n    composeEnhancers(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        thunk,\n        sagaMiddleware,\n        // ... other middlewares ...\n      ),\n    ),\n  );\n\n  const persistor = persistStore(store);\n\n  sagaMiddleware.run(rootSaga);\n\n  return { store, persistor };\n}\n"]},"metadata":{},"sourceType":"module"}