{"ast":null,"code":"var _jsxFileName = \"D:\\\\PowerGate\\\\Validate-useform\\\\src\\\\modules\\\\auth\\\\components\\\\SingupForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { FormattedMessage } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingupForm = props => {\n  _s();\n\n  const {\n    onSingUp,\n    locaions,\n    states,\n    onChangeRegion,\n    loading,\n    errorMessage\n  } = props;\n  const [city, setCity] = useState([]);\n  console.log(city);\n  const [formValues, setFormValues] = React.useState({\n    email: '',\n    password: '',\n    register: \"\",\n    fullName: \"\",\n    nation: \"\",\n    city: \"\"\n  });\n  const {\n    control,\n    handleSubmit\n  } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n      register: \"\",\n      fullName: \"\",\n      nation: \"\",\n      city: \"\"\n    }\n  });\n\n  function toastMessage() {\n    if (errorMessage.trim() === \"Login succes\") {\n      toast.success(\"Login sucess!\", {\n        duration: 2000\n      });\n    } else {\n      toast.error(\"Invalid username / password\", {\n        duration: 1000\n      });\n    }\n  }\n\n  const onSubmit = React.useCallback(async data => {\n    await onSingUp(formValues);\n    toastMessage();\n  }, [formValues]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      // onSubmit={handleSubmit(onSubmit)}\n      style: {\n        maxWidth: '560px',\n        width: '100%'\n      },\n      className: \"row g-3 needs-validation\",\n      children: [/*#__PURE__*/_jsxDEV(Controller, {\n        name: \"email\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          pattern: {\n            value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            message: \"Value is not email\"\n          },\n          required: \"This email is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputEmail\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"text\",\n            name: \"email\",\n            className: \"form-control\",\n            id: \"inputEmail\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                email: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"password\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          minLength: {\n            value: 6,\n            message: \"This input must exceed 6 characters\"\n          },\n          required: \"This password is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"register\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          minLength: {\n            value: 6,\n            message: \"This input must exceed 6 characters\"\n          },\n          required: \"This password is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"X\\xE1c nh\\u1EADp l\\u1EA1i m\\u1EADt kh\\u1EA9u\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"fullName\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"H\\u1ECD v\\xE0 T\\xEAn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"nation\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"Gi\\u1EDBi t\\xEDnh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            \"aria-label\": \"Default select example\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              selected: true,\n              children: \"Open this select menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }, this), city.map(ci => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                children: ci\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 44\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"city\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"Qu\\u1ED1c Gia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"city\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"Th\\xE0nh Ph\\u1ED1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-md-center\",\n        style: {\n          margin: '16px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-auto\",\n          style: {\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"submit\",\n            style: {\n              minWidth: '160px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            disabled: loading,\n            value: \"\\u0110\\u0103ng Nh\\u1EADp\",\n            children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border spinner-border-sm text-light mr-2\",\n              role: \"status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingupForm, \"RRHPqKAur/lvBCvOpFqLU+HFn94=\", false, function () {\n  return [useForm];\n});\n\n_c = SingupForm;\nexport default SingupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingupForm\");","map":{"version":3,"sources":["D:/PowerGate/Validate-useform/src/modules/auth/components/SingupForm.tsx"],"names":["React","useState","useForm","Controller","FormattedMessage","toast","SingupForm","props","onSingUp","locaions","states","onChangeRegion","loading","errorMessage","city","setCity","console","log","formValues","setFormValues","email","password","register","fullName","nation","control","handleSubmit","defaultValues","toastMessage","trim","success","duration","error","onSubmit","useCallback","data","height","display","alignItems","justifyContent","flexDirection","maxWidth","width","pattern","value","message","required","field","fieldState","e","onChange","target","minLength","map","ci","margin","position","minWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { ILoginParams, ILoginValidation, ISingupParams } from '../../../models/auth';\r\n\r\ninterface Props {\r\n    // onLogin(values: ILoginParams): void;\r\n    loading: boolean;\r\n    errorMessage: string;\r\n}\r\n\r\n\r\nconst SingupForm = (props: Props) => {\r\n    const { onSingUp, locaions, states, onChangeRegion, loading, errorMessage } = props;\r\n    const [city, setCity] = useState([])\r\n    console.log(city)\r\n    const [formValues, setFormValues] = React.useState<ISingupParams>({\r\n        email: '',\r\n        password: '',\r\n        register: \"\",\r\n        fullName: \"\",\r\n        nation: \"\",\r\n        city: \"\",\r\n    });\r\n    const { control, handleSubmit } = useForm({\r\n        defaultValues: {\r\n            email: '',\r\n            password: '',\r\n            register: \"\",\r\n            fullName: \"\",\r\n            nation: \"\",\r\n            city: \"\",\r\n\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    function toastMessage() {\r\n        if (errorMessage.trim() === \"Login succes\") {\r\n            toast.success(\"Login sucess!\", {\r\n                duration: 2000,\r\n            })\r\n\r\n        } else {\r\n            toast.error(\"Invalid username / password\", {\r\n                duration: 1000,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const onSubmit = React.useCallback(async (data: ILoginParams) => {\r\n        await onSingUp(formValues)\r\n\r\n        toastMessage()\r\n\r\n    }, [formValues]);\r\n\r\n    return (\r\n        <div\r\n            className=\"container\"\r\n            style={{\r\n                height: '100vh',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                flexDirection: 'column',\r\n            }}\r\n        >\r\n\r\n\r\n            <form\r\n                // onSubmit={handleSubmit(onSubmit)}\r\n                style={{ maxWidth: '560px', width: '100%' }}\r\n                className=\"row g-3 needs-validation\"\r\n            >\r\n\r\n                <Controller\r\n                    name=\"email\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        pattern: {\r\n                            value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                            message: \"Value is not email\"\r\n                        },\r\n                        required: \"This email is required.\",\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputEmail\" className=\"form-label\">\r\n                                <FormattedMessage id=\"email\" />\r\n                            </label>\r\n                            <input\r\n                                {...field}\r\n                                type=\"text\"\r\n                                name=\"email\"\r\n                                className=\"form-control\"\r\n                                id=\"inputEmail\"\r\n                                onChange={(e) => {\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, email: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error.message}\r\n                            </small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"password\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: \"This input must exceed 6 characters\"\r\n                        },\r\n                        required: \"This password is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"password\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"register\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: \"This input must exceed 6 characters\"\r\n                        },\r\n                        required: \"This password is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Xác nhập lại mật khẩu\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n                <Controller\r\n                    name=\"fullName\"\r\n                    control={control}\r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Họ và Tên\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n\r\n                <Controller\r\n                    name=\"nation\"\r\n                    control={control}\r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Giới tính\" />\r\n                            </label>\r\n                            <select className=\"form-select\" aria-label=\"Default select example\">\r\n                                <option selected>Open this select menu</option>\r\n                                {city.map((ci) => {\r\n                                    return <option >{ci}</option>\r\n                                })}\r\n                            </select>\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"city\"\r\n                    control={control}\r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Quốc Gia\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"city\"\r\n                    control={control}\r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Thành Phố\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <div className=\"row justify-content-md-center\" style={{ margin: '16px 0' }}>\r\n                    <div className=\"col-md-auto\" style={{ position: \"relative\" }}>\r\n                        <button\r\n                            className=\"btn btn-primary\"\r\n                            type=\"submit\"\r\n                            style={{ minWidth: '160px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n                            disabled={loading}\r\n                            value=\"Đăng Nhập\"\r\n                        >\r\n                            {loading && <div className=\"spinner-border spinner-border-sm text-light mr-2\" role=\"status\" />}\r\n                            <FormattedMessage id=\"register\" />\r\n\r\n\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form >\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default SingupForm;\r\n"]},"metadata":{},"sourceType":"module"}