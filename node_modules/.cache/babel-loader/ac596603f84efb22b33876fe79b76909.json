{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { useForm, Controller, SubmitHandler } from \"react-hook-form\";\n// import { FormattedMessage } from 'react-intl';\n// import toast, { Toaster } from 'react-hot-toast';\n// import { ILoginParams, ILoginValidation, ISignUpParams, ILocationParams, ISignUpValidation } from '../../../models/auth';\n// interface Props {\n//     onSignUp(values: ISignUpParams): void;\n//     loading: boolean;\n//     errorMessage: string;\n//     locations: Array<ILocationParams>;\n//     states: Array<ILocationParams>;\n//     onChangeRegion(idRegion: string): void;\n// }\n// const SingupForm = (props: Props) => {\n//     const { onSignUp, loading, errorMessage, locations, states, onChangeRegion } = props;\n//     const { control, handleSubmit } = useForm({\n//         defaultValues: {\n//             email: '',\n//             password: '',\n//             repeatPassword: '',\n//             name: '',\n//             gender: '',\n//             region: '',\n//             state: '',\n//         }\n//     });\n//     const [formValues, setFormValues] = React.useState<ISignUpParams>({\n//         email: '',\n//         password: '',\n//         repeatPassword: '',\n//         name: '',\n//         gender: '',\n//         region: '',\n//         state: '',\n//     });\n//     const [validate, setValidate] = React.useState<ISignUpValidation>();\n//     // const onSubmit = React.useCallback(() => {\n//     //   const validate = validateSignUp(formValues);\n//     //   setValidate(validate);\n//     //   if (!validSignUp(validate)) {\n//     //     return;\n//     //   }\n//     //   onSignUp(formValues);\n//     // }, [formValues, onSignUp]);\n//     function toastMessage() {\n//         if (errorMessage.trim() === \"Login succes\") {\n//             toast.success(\"Login sucess!\", {\n//                 duration: 2000,\n//             })\n//         } else {\n//             toast.error(\"Invalid username / password\", {\n//                 duration: 1000,\n//             })\n//         }\n//     }\n//     // const onSubmit = React.useCallback(async (data: ILoginParams) => {\n//     //     await onSingUp(formValues)\n//     //     toastMessage()\n//     // }, [formValues]);\n//     return (\n//         <div\n//             className=\"container\"\n//             style={{\n//                 height: '100vh',\n//                 display: 'flex',\n//                 alignItems: 'center',\n//                 justifyContent: 'center',\n//                 flexDirection: 'column',\n//             }}\n//         >\n//             <form\n//                 // onSubmit={handleSubmit(onSubmit)}\n//                 style={{ maxWidth: '560px', width: '100%' }}\n//                 className=\"row g-3 needs-validation\"\n//             >\n//                 <Controller\n//                     name=\"email\"\n//                     control={control}\n//                     defaultValue=\"\"\n//                     rules={{\n//                         pattern: {\n//                             value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n//                             message: \"Value is not email\"\n//                         },\n//                         required: \"This email is required.\",\n//                     }}\n//                     render={({ field, fieldState: { error } }) => (\n//                         <div className=\"col-md-12\">\n//                             <label htmlFor=\"inputEmail\" className=\"form-label\">\n//                                 <FormattedMessage id=\"email\" />\n//                             </label>\n//                             <input\n//                                 {...field}\n//                                 type=\"text\"\n//                                 name=\"email\"\n//                                 className=\"form-control\"\n//                                 id=\"inputEmail\"\n//                                 onChange={(e) => {\n//                                     field.onChange(e);\n//                                     setFormValues({ ...formValues, email: e.target.value })\n//                                 }}\n//                             />\n//                             {error && <small className=\"text-danger\">\n//                                 {error.message}\n//                             </small>}\n//                         </div>\n//                     )}\n//                 />\n//                 <Controller\n//                     name=\"password\"\n//                     control={control}\n//                     defaultValue=\"\"\n//                     rules={{\n//                         minLength: {\n//                             value: 6,\n//                             message: \"This input must exceed 6 characters\"\n//                         },\n//                         required: \"This password is required.\",\n//                     }}\n//                     render={({ field, fieldState: { error } }) => (\n//                         <div className=\"col-md-12\">\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\n//                                 <FormattedMessage id=\"password\" />\n//                             </label>\n//                             <input {...field}\n//                                 type=\"password\"\n//                                 className=\"form-control\"\n//                                 id=\"inputPassword\"\n//                                 onChange={(e) => {\n//                                     field.onChange(e);\n//                                     setFormValues({ ...formValues, password: e.target.value })\n//                                 }}\n//                             />\n//                             {error && <small className=\"text-danger\">\n//                                 {error?.message}</small>}\n//                         </div>\n//                     )}\n//                 />\n//                 <Controller\n//                     name=\"repeatPassword\"\n//                     control={control}\n//                     defaultValue=\"\"\n//                     rules={{\n//                         minLength: {\n//                             value: 6,\n//                             message: \"This input must exceed 6 characters\"\n//                         },\n//                         required: \"This password is required.\",\n//                     }}\n//                     render={({ field, fieldState: { error } }) => (\n//                         <div className=\"col-md-12\">\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\n//                                 <FormattedMessage id=\"Xác nhập lại mật khẩu\" />\n//                             </label>\n//                             <input {...field}\n//                                 type=\"password\"\n//                                 className=\"form-control\"\n//                                 id=\"inputPassword\"\n//                                 onChange={(e) => {\n//                                     field.onChange(e);\n//                                     setFormValues({ ...formValues, password: e.target.value })\n//                                 }}\n//                             />\n//                             {error && <small className=\"text-danger\">\n//                                 {error?.message}</small>}\n//                         </div>\n//                     )}\n//                 />\n//                 <Controller\n//                     name=\"name\"\n//                     control={control}\n//                     render={({ field, fieldState: { error } }) => (\n//                         <div className=\"col-md-12\">\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\n//                                 <FormattedMessage id=\"Họ và Tên\" />\n//                             </label>\n//                             <input {...field}\n//                                 type=\"password\"\n//                                 className=\"form-control\"\n//                                 id=\"inputPassword\"\n//                                 onChange={(e) => {\n//                                     field.onChange(e);\n//                                     setFormValues({ ...formValues, password: e.target.value })\n//                                 }}\n//                             />\n//                             {error && <small className=\"text-danger\">\n//                                 {error?.message}</small>}\n//                         </div>\n//                     )}\n//                 />\n//                 <Controller\n//                     name=\"region\"\n//                     render={({ field, fieldState: { error } }) => (\n//                         <div className=\"col-md-12\">\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\n//                                 <FormattedMessage id=\"Giới tính\" />\n//                             </label>\n//                             <select className=\"form-select\" aria-label=\"Default select example\">\n//                                 <option selected>Open this select menu</option>\n//                                 {/* {city.map((ci) => {\n//                                     return <option >{ci}</option>\n//                                 })} */}\n//                             </select>\n//                             {error && <small className=\"text-danger\">\n//                                 {error?.message}</small>}\n//                         </div>\n//                     )}\n//                 />\n//                 <Controller\n//                     name=\"state\"\n//                     control={control}\n//                     render={({ field, fieldState: { error } }) => (\n//                         <div className=\"col-md-12\">\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\n//                                 <FormattedMessage id=\"Quốc Gia\" />\n//                             </label>\n//                             <input {...field}\n//                                 type=\"password\"\n//                                 className=\"form-control\"\n//                                 id=\"inputPassword\"\n//                                 onChange={(e) => {\n//                                     field.onChange(e);\n//                                     setFormValues({ ...formValues, password: e.target.value })\n//                                 }}\n//                             />\n//                             {error && <small className=\"text-danger\">\n//                                 {error?.message}</small>}\n//                         </div>\n//                     )}\n//                 />\n//                 <Controller\n//                     name=\"gender\"\n//                     control={control}\n//                     render={({ field, fieldState: { error } }) => (\n//                         <div className=\"col-md-12\">\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\n//                                 <FormattedMessage id=\"Thành Phố\" />\n//                             </label>\n//                             <input {...field}\n//                                 type=\"password\"\n//                                 className=\"form-control\"\n//                                 id=\"inputPassword\"\n//                                 onChange={(e) => {\n//                                     field.onChange(e);\n//                                     setFormValues({ ...formValues, password: e.target.value })\n//                                 }}\n//                             />\n//                             {error && <small className=\"text-danger\">\n//                                 {error?.message}</small>}\n//                         </div>\n//                     )}\n//                 />\n//                 <div className=\"row justify-content-md-center\" style={{ margin: '16px 0' }}>\n//                     <div className=\"col-md-auto\" style={{ position: \"relative\" }}>\n//                         <button\n//                             className=\"btn btn-primary\"\n//                             type=\"submit\"\n//                             style={{ minWidth: '160px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\n//                             disabled={loading}\n//                             value=\"Đăng Nhập\"\n//                         >\n//                             {loading && <div className=\"spinner-border spinner-border-sm text-light mr-2\" role=\"status\" />}\n//                             <FormattedMessage id=\"register\" />\n//                         </button>\n//                     </div>\n//                 </div>\n//             </form >\n//         </div>\n//     );\n// };\n// export default SingupForm;","map":{"version":3,"sources":["D:/PowerGate/Validate-useform/src/modules/auth/components/SingupForm.tsx"],"names":[],"mappingssourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useForm, Controller, SubmitHandler } from \"react-hook-form\";\r\n// import { FormattedMessage } from 'react-intl';\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n// import { ILoginParams, ILoginValidation, ISignUpParams, ILocationParams, ISignUpValidation } from '../../../models/auth';\r\n\r\n// interface Props {\r\n//     onSignUp(values: ISignUpParams): void;\r\n//     loading: boolean;\r\n//     errorMessage: string;\r\n//     locations: Array<ILocationParams>;\r\n//     states: Array<ILocationParams>;\r\n//     onChangeRegion(idRegion: string): void;\r\n// }\r\n\r\n\r\n// const SingupForm = (props: Props) => {\r\n//     const { onSignUp, loading, errorMessage, locations, states, onChangeRegion } = props;\r\n//     const { control, handleSubmit } = useForm({\r\n//         defaultValues: {\r\n//             email: '',\r\n//             password: '',\r\n//             repeatPassword: '',\r\n//             name: '',\r\n//             gender: '',\r\n//             region: '',\r\n//             state: '',\r\n//         }\r\n//     });\r\n//     const [formValues, setFormValues] = React.useState<ISignUpParams>({\r\n//         email: '',\r\n//         password: '',\r\n//         repeatPassword: '',\r\n//         name: '',\r\n//         gender: '',\r\n//         region: '',\r\n//         state: '',\r\n//     });\r\n//     const [validate, setValidate] = React.useState<ISignUpValidation>();\r\n\r\n//     // const onSubmit = React.useCallback(() => {\r\n//     //   const validate = validateSignUp(formValues);\r\n\r\n//     //   setValidate(validate);\r\n\r\n//     //   if (!validSignUp(validate)) {\r\n//     //     return;\r\n//     //   }\r\n\r\n//     //   onSignUp(formValues);\r\n//     // }, [formValues, onSignUp]);\r\n\r\n//     function toastMessage() {\r\n//         if (errorMessage.trim() === \"Login succes\") {\r\n//             toast.success(\"Login sucess!\", {\r\n//                 duration: 2000,\r\n//             })\r\n\r\n//         } else {\r\n//             toast.error(\"Invalid username / password\", {\r\n//                 duration: 1000,\r\n//             })\r\n//         }\r\n\r\n//     }\r\n\r\n\r\n//     // const onSubmit = React.useCallback(async (data: ILoginParams) => {\r\n//     //     await onSingUp(formValues)\r\n\r\n//     //     toastMessage()\r\n\r\n//     // }, [formValues]);\r\n\r\n//     return (\r\n//         <div\r\n//             className=\"container\"\r\n//             style={{\r\n//                 height: '100vh',\r\n//                 display: 'flex',\r\n//                 alignItems: 'center',\r\n//                 justifyContent: 'center',\r\n//                 flexDirection: 'column',\r\n//             }}\r\n//         >\r\n\r\n\r\n//             <form\r\n//                 // onSubmit={handleSubmit(onSubmit)}\r\n//                 style={{ maxWidth: '560px', width: '100%' }}\r\n//                 className=\"row g-3 needs-validation\"\r\n//             >\r\n\r\n//                 <Controller\r\n//                     name=\"email\"\r\n//                     control={control}\r\n//                     defaultValue=\"\"\r\n//                     rules={{\r\n//                         pattern: {\r\n//                             value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n//                             message: \"Value is not email\"\r\n//                         },\r\n//                         required: \"This email is required.\",\r\n//                     }}\r\n//                     render={({ field, fieldState: { error } }) => (\r\n//                         <div className=\"col-md-12\">\r\n//                             <label htmlFor=\"inputEmail\" className=\"form-label\">\r\n//                                 <FormattedMessage id=\"email\" />\r\n//                             </label>\r\n//                             <input\r\n//                                 {...field}\r\n//                                 type=\"text\"\r\n//                                 name=\"email\"\r\n//                                 className=\"form-control\"\r\n//                                 id=\"inputEmail\"\r\n//                                 onChange={(e) => {\r\n//                                     field.onChange(e);\r\n//                                     setFormValues({ ...formValues, email: e.target.value })\r\n//                                 }}\r\n//                             />\r\n//                             {error && <small className=\"text-danger\">\r\n//                                 {error.message}\r\n//                             </small>}\r\n//                         </div>\r\n//                     )}\r\n//                 />\r\n\r\n//                 <Controller\r\n//                     name=\"password\"\r\n//                     control={control}\r\n//                     defaultValue=\"\"\r\n//                     rules={{\r\n//                         minLength: {\r\n//                             value: 6,\r\n//                             message: \"This input must exceed 6 characters\"\r\n//                         },\r\n//                         required: \"This password is required.\",\r\n\r\n//                     }}\r\n//                     render={({ field, fieldState: { error } }) => (\r\n//                         <div className=\"col-md-12\">\r\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n//                                 <FormattedMessage id=\"password\" />\r\n//                             </label>\r\n//                             <input {...field}\r\n//                                 type=\"password\"\r\n//                                 className=\"form-control\"\r\n//                                 id=\"inputPassword\"\r\n//                                 onChange={(e) => {\r\n\r\n//                                     field.onChange(e);\r\n//                                     setFormValues({ ...formValues, password: e.target.value })\r\n//                                 }}\r\n//                             />\r\n//                             {error && <small className=\"text-danger\">\r\n//                                 {error?.message}</small>}\r\n//                         </div>\r\n//                     )}\r\n//                 />\r\n\r\n//                 <Controller\r\n//                     name=\"repeatPassword\"\r\n//                     control={control}\r\n//                     defaultValue=\"\"\r\n//                     rules={{\r\n//                         minLength: {\r\n//                             value: 6,\r\n//                             message: \"This input must exceed 6 characters\"\r\n//                         },\r\n//                         required: \"This password is required.\",\r\n\r\n//                     }}\r\n//                     render={({ field, fieldState: { error } }) => (\r\n//                         <div className=\"col-md-12\">\r\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n//                                 <FormattedMessage id=\"Xác nhập lại mật khẩu\" />\r\n//                             </label>\r\n//                             <input {...field}\r\n//                                 type=\"password\"\r\n//                                 className=\"form-control\"\r\n//                                 id=\"inputPassword\"\r\n//                                 onChange={(e) => {\r\n\r\n//                                     field.onChange(e);\r\n//                                     setFormValues({ ...formValues, password: e.target.value })\r\n//                                 }}\r\n//                             />\r\n//                             {error && <small className=\"text-danger\">\r\n//                                 {error?.message}</small>}\r\n//                         </div>\r\n//                     )}\r\n//                 />\r\n//                 <Controller\r\n//                     name=\"name\"\r\n//                     control={control}\r\n\r\n//                     render={({ field, fieldState: { error } }) => (\r\n//                         <div className=\"col-md-12\">\r\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n//                                 <FormattedMessage id=\"Họ và Tên\" />\r\n//                             </label>\r\n//                             <input {...field}\r\n//                                 type=\"password\"\r\n//                                 className=\"form-control\"\r\n//                                 id=\"inputPassword\"\r\n//                                 onChange={(e) => {\r\n\r\n//                                     field.onChange(e);\r\n//                                     setFormValues({ ...formValues, password: e.target.value })\r\n//                                 }}\r\n//                             />\r\n//                             {error && <small className=\"text-danger\">\r\n//                                 {error?.message}</small>}\r\n//                         </div>\r\n//                     )}\r\n//                 />\r\n\r\n\r\n//                 <Controller\r\n//                     name=\"region\"\r\n\r\n\r\n//                     render={({ field, fieldState: { error } }) => (\r\n//                         <div className=\"col-md-12\">\r\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n//                                 <FormattedMessage id=\"Giới tính\" />\r\n//                             </label>\r\n//                             <select className=\"form-select\" aria-label=\"Default select example\">\r\n//                                 <option selected>Open this select menu</option>\r\n//                                 {/* {city.map((ci) => {\r\n//                                     return <option >{ci}</option>\r\n//                                 })} */}\r\n//                             </select>\r\n//                             {error && <small className=\"text-danger\">\r\n//                                 {error?.message}</small>}\r\n//                         </div>\r\n//                     )}\r\n//                 />\r\n\r\n//                 <Controller\r\n//                     name=\"state\"\r\n//                     control={control}\r\n\r\n//                     render={({ field, fieldState: { error } }) => (\r\n//                         <div className=\"col-md-12\">\r\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n//                                 <FormattedMessage id=\"Quốc Gia\" />\r\n//                             </label>\r\n//                             <input {...field}\r\n//                                 type=\"password\"\r\n//                                 className=\"form-control\"\r\n//                                 id=\"inputPassword\"\r\n//                                 onChange={(e) => {\r\n\r\n//                                     field.onChange(e);\r\n//                                     setFormValues({ ...formValues, password: e.target.value })\r\n//                                 }}\r\n//                             />\r\n//                             {error && <small className=\"text-danger\">\r\n//                                 {error?.message}</small>}\r\n//                         </div>\r\n//                     )}\r\n//                 />\r\n\r\n//                 <Controller\r\n//                     name=\"gender\"\r\n//                     control={control}\r\n\r\n//                     render={({ field, fieldState: { error } }) => (\r\n//                         <div className=\"col-md-12\">\r\n//                             <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n//                                 <FormattedMessage id=\"Thành Phố\" />\r\n//                             </label>\r\n//                             <input {...field}\r\n//                                 type=\"password\"\r\n//                                 className=\"form-control\"\r\n//                                 id=\"inputPassword\"\r\n//                                 onChange={(e) => {\r\n\r\n//                                     field.onChange(e);\r\n//                                     setFormValues({ ...formValues, password: e.target.value })\r\n//                                 }}\r\n//                             />\r\n//                             {error && <small className=\"text-danger\">\r\n//                                 {error?.message}</small>}\r\n//                         </div>\r\n//                     )}\r\n//                 />\r\n\r\n//                 <div className=\"row justify-content-md-center\" style={{ margin: '16px 0' }}>\r\n//                     <div className=\"col-md-auto\" style={{ position: \"relative\" }}>\r\n//                         <button\r\n//                             className=\"btn btn-primary\"\r\n//                             type=\"submit\"\r\n//                             style={{ minWidth: '160px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n//                             disabled={loading}\r\n//                             value=\"Đăng Nhập\"\r\n//                         >\r\n//                             {loading && <div className=\"spinner-border spinner-border-sm text-light mr-2\" role=\"status\" />}\r\n//                             <FormattedMessage id=\"register\" />\r\n\r\n\r\n//                         </button>\r\n//                     </div>\r\n//                 </div>\r\n//             </form >\r\n\r\n//         </div>\r\n\r\n//     );\r\n// };\r\n\r\n// export default SingupForm;\r\n"]},"metadata":{},"sourceType":"module"}