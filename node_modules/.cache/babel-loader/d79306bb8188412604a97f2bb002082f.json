{"ast":null,"code":"var _jsxFileName = \"D:\\\\PowerGate\\\\Validate-useform\\\\src\\\\modules\\\\auth\\\\components\\\\SingupForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { FormattedMessage } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingupForm = props => {\n  _s();\n\n  const {\n    onSignUp,\n    loading,\n    errorMessage,\n    locations,\n    states,\n    onChangeRegion\n  } = props;\n  const {\n    control,\n    handleSubmit\n  } = useForm({// defaultValues: {\n    //     email: \"\",\n    //     password: \"\",\n    //     rememberMe: false\n    // }\n  });\n  const [formValues, setFormValues] = React.useState({\n    email: '',\n    password: '',\n    repeatPassword: '',\n    name: '',\n    gender: '',\n    region: '',\n    state: ''\n  });\n  const [validate, setValidate] = React.useState(); // const onSubmit = React.useCallback(() => {\n  //   const validate = validateSignUp(formValues);\n  //   setValidate(validate);\n  //   if (!validSignUp(validate)) {\n  //     return;\n  //   }\n  //   onSignUp(formValues);\n  // }, [formValues, onSignUp]);\n\n  function toastMessage() {\n    if (errorMessage.trim() === \"Login succes\") {\n      toast.success(\"Login sucess!\", {\n        duration: 2000\n      });\n    } else {\n      toast.error(\"Invalid username / password\", {\n        duration: 1000\n      });\n    }\n  } // const onSubmit = React.useCallback(async (data: ILoginParams) => {\n  //     await onSingUp(formValues)\n  //     toastMessage()\n  // }, [formValues]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      height: '100vh',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      // onSubmit={handleSubmit(onSubmit)}\n      style: {\n        maxWidth: '560px',\n        width: '100%'\n      },\n      className: \"row g-3 needs-validation\",\n      children: [/*#__PURE__*/_jsxDEV(Controller, {\n        name: \"email\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          pattern: {\n            value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            message: \"Value is not email\"\n          },\n          required: \"This email is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputEmail\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"text\",\n            name: \"email\",\n            className: \"form-control\",\n            id: \"inputEmail\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                email: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"password\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          minLength: {\n            value: 6,\n            message: \"This input must exceed 6 characters\"\n          },\n          required: \"This password is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"repeatPassword\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          minLength: {\n            value: 6,\n            message: \"This input must exceed 6 characters\"\n          },\n          required: \"This password is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"X\\xE1c nh\\u1EADp l\\u1EA1i m\\u1EADt kh\\u1EA9u\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"name\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"H\\u1ECD v\\xE0 T\\xEAn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"region\",\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"Gi\\u1EDBi t\\xEDnh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            \"aria-label\": \"Default select example\",\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              selected: true,\n              children: \"Open this select menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"city\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"Qu\\u1ED1c Gia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"city\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"Th\\xE0nh Ph\\u1ED1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-md-center\",\n        style: {\n          margin: '16px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-auto\",\n          style: {\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"submit\",\n            style: {\n              minWidth: '160px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            disabled: loading,\n            value: \"\\u0110\\u0103ng Nh\\u1EADp\",\n            children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border spinner-border-sm text-light mr-2\",\n              role: \"status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingupForm, \"Sbl+ulwoaDe0E7hJeBDMnrTP7Hc=\", false, function () {\n  return [useForm];\n});\n\n_c = SingupForm;\nexport default SingupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingupForm\");","map":{"version":3,"sources":["D:/PowerGate/Validate-useform/src/modules/auth/components/SingupForm.tsx"],"names":["React","useForm","Controller","FormattedMessage","toast","SingupForm","props","onSignUp","loading","errorMessage","locations","states","onChangeRegion","control","handleSubmit","formValues","setFormValues","useState","email","password","repeatPassword","name","gender","region","state","validate","setValidate","toastMessage","trim","success","duration","error","height","display","alignItems","justifyContent","flexDirection","maxWidth","width","pattern","value","message","required","field","fieldState","e","onChange","target","minLength","margin","position","minWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { ILoginParams, ILoginValidation, ISignUpParams , ILocationParams , ISignUpValidation } from '../../../models/auth';\r\n\r\ninterface Props {\r\n    onSignUp(values: ISignUpParams): void;\r\n    loading: boolean;\r\n    errorMessage: string;\r\n    locations: Array<ILocationParams>;\r\n    states: Array<ILocationParams>;\r\n    onChangeRegion(idRegion: string): void;\r\n}\r\n\r\n\r\nconst SingupForm = (props: Props) => {\r\n    const { onSignUp, loading, errorMessage, locations, states, onChangeRegion } = props;\r\n    const { control, handleSubmit } = useForm({\r\n        // defaultValues: {\r\n        //     email: \"\",\r\n        //     password: \"\",\r\n        //     rememberMe: false\r\n        // }\r\n    });\r\n    const [formValues, setFormValues] = React.useState<ISignUpParams>({\r\n      email: '',\r\n      password: '',\r\n      repeatPassword: '',\r\n      name: '',\r\n      gender: '',\r\n      region: '',\r\n      state: '',\r\n    });\r\n    const [validate, setValidate] = React.useState<ISignUpValidation>();\r\n  \r\n    // const onSubmit = React.useCallback(() => {\r\n    //   const validate = validateSignUp(formValues);\r\n  \r\n    //   setValidate(validate);\r\n  \r\n    //   if (!validSignUp(validate)) {\r\n    //     return;\r\n    //   }\r\n  \r\n    //   onSignUp(formValues);\r\n    // }, [formValues, onSignUp]);\r\n\r\n    function toastMessage() {\r\n        if (errorMessage.trim() === \"Login succes\") {\r\n            toast.success(\"Login sucess!\", {\r\n                duration: 2000,\r\n            })\r\n\r\n        } else {\r\n            toast.error(\"Invalid username / password\", {\r\n                duration: 1000,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // const onSubmit = React.useCallback(async (data: ILoginParams) => {\r\n    //     await onSingUp(formValues)\r\n\r\n    //     toastMessage()\r\n\r\n    // }, [formValues]);\r\n\r\n    return (\r\n        <div\r\n            className=\"container\"\r\n            style={{\r\n                height: '100vh',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                flexDirection: 'column',\r\n            }}\r\n        >\r\n\r\n\r\n            <form\r\n                // onSubmit={handleSubmit(onSubmit)}\r\n                style={{ maxWidth: '560px', width: '100%' }}\r\n                className=\"row g-3 needs-validation\"\r\n            >\r\n\r\n                <Controller\r\n                    name=\"email\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        pattern: {\r\n                            value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                            message: \"Value is not email\"\r\n                        },\r\n                        required: \"This email is required.\",\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputEmail\" className=\"form-label\">\r\n                                <FormattedMessage id=\"email\" />\r\n                            </label>\r\n                            <input\r\n                                {...field}\r\n                                type=\"text\"\r\n                                name=\"email\"\r\n                                className=\"form-control\"\r\n                                id=\"inputEmail\"\r\n                                onChange={(e) => {\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, email: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error.message}\r\n                            </small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"password\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: \"This input must exceed 6 characters\"\r\n                        },\r\n                        required: \"This password is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"password\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"repeatPassword\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: \"This input must exceed 6 characters\"\r\n                        },\r\n                        required: \"This password is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Xác nhập lại mật khẩu\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n                <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Họ và Tên\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n\r\n                <Controller\r\n                    name=\"region\"\r\n          \r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Giới tính\" />\r\n                            </label>\r\n                            <select className=\"form-select\" aria-label=\"Default select example\">\r\n                                <option selected>Open this select menu</option>\r\n                                {/* {city.map((ci) => {\r\n                                    return <option >{ci}</option>\r\n                                })} */}\r\n                            </select>\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"city\"\r\n                    control={control}\r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Quốc Gia\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"city\"\r\n                    control={control}\r\n\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id=\"Thành Phố\" />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <div className=\"row justify-content-md-center\" style={{ margin: '16px 0' }}>\r\n                    <div className=\"col-md-auto\" style={{ position: \"relative\" }}>\r\n                        <button\r\n                            className=\"btn btn-primary\"\r\n                            type=\"submit\"\r\n                            style={{ minWidth: '160px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n                            disabled={loading}\r\n                            value=\"Đăng Nhập\"\r\n                        >\r\n                            {loading && <div className=\"spinner-border spinner-border-sm text-light mr-2\" role=\"status\" />}\r\n                            <FormattedMessage id=\"register\" />\r\n\r\n\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form >\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default SingupForm;\r\n"]},"metadata":{},"sourceType":"module"}