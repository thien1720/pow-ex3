{"ast":null,"code":"var _jsxFileName = \"D:\\\\PowerGate\\\\Validate-useform\\\\src\\\\modules\\\\auth\\\\components\\\\SingupForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm, Controller } from \"react-hook-form\";\nimport { FormattedMessage } from 'react-intl';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SingupForm = props => {\n  _s();\n\n  const {\n    onLogin,\n    loading,\n    errorMessage\n  } = props;\n  const [formValues, setFormValues] = React.useState({\n    email: '',\n    password: '',\n    register: \"\",\n    fullName: \"\",\n    nation: \"\",\n    city: \"\"\n  });\n  const {\n    control,\n    handleSubmit\n  } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n      register: \"\",\n      fullName: \"\",\n      nation: \"\",\n      city: \"\"\n    }\n  }); // useEffect(())\n\n  function toastMessage() {\n    if (errorMessage.trim() === \"Login succes\") {\n      toast.success(\"Login sucess!\", {\n        duration: 2000\n      });\n    } else {\n      toast.error(\"Invalid username / password\", {\n        duration: 1000\n      });\n    }\n  }\n\n  const onSubmit = React.useCallback(async data => {\n    await onLogin(formValues);\n    toastMessage();\n  }, [formValues]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      style: {\n        maxWidth: '560px',\n        width: '100%'\n      },\n      className: \"row g-3 needs-validation\",\n      children: [/*#__PURE__*/_jsxDEV(Controller, {\n        name: \"email\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          pattern: {\n            value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            message: \"Value is not email\"\n          },\n          required: \"This email is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputEmail\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"text\",\n            name: \"email\",\n            className: \"form-control\",\n            id: \"inputEmail\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                email: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"password\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          minLength: {\n            value: 6,\n            message: \"This input must exceed 6 characters\"\n          },\n          required: \"This password is required.\"\n        },\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"inputPassword\",\n            className: \"form-label\",\n            children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...field,\n            type: \"password\",\n            className: \"form-control\",\n            id: \"inputPassword\",\n            onChange: e => {\n              field.onChange(e);\n              setFormValues({ ...formValues,\n                password: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), error && /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-danger\",\n            children: error === null || error === void 0 ? void 0 : error.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"fullName\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"checkbox\",\n              id: \"invalidCheck\",\n              onChange: e => {\n                field.onChange(e);\n                setFormValues({ ...formValues,\n                  rememberMe: !!field.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: \"invalidCheck\",\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"rememberMe\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"nation\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"checkbox\",\n              id: \"invalidCheck\" // onChange={(e) => {\n              //     field.onChange(e);\n              //     setFormValues({ ...formValues, rememberMe: !!field.value })\n              // }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: \"invalidCheck\",\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"rememberMe\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"city\",\n        control: control,\n        render: ({\n          field,\n          fieldState: {\n            error\n          }\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"checkbox\",\n              id: \"invalidCheck\" // onChange={(e) => {\n              //     field.onChange(e);\n              //     setFormValues({ ...formValues, rememberMe: !!field.value })\n              // }}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: \"invalidCheck\",\n              children: /*#__PURE__*/_jsxDEV(FormattedMessage, {\n                id: \"rememberMe\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-md-center\",\n        style: {\n          margin: '16px 0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-auto\",\n          style: {\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"submit\",\n            style: {\n              minWidth: '160px',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            disabled: loading,\n            value: \"\\u0110\\u0103ng Nh\\u1EADp\",\n            children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border spinner-border-sm text-light mr-2\",\n              role: \"status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(FormattedMessage, {\n              id: \"register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingupForm, \"a1j0uIKl2R2qaZL0G4XTN/mWEE0=\", false, function () {\n  return [useForm];\n});\n\n_c = SingupForm;\nexport default SingupForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingupForm\");","map":{"version":3,"sources":["D:/PowerGate/Validate-useform/src/modules/auth/components/SingupForm.tsx"],"names":["React","useForm","Controller","FormattedMessage","toast","SingupForm","props","onLogin","loading","errorMessage","formValues","setFormValues","useState","email","password","register","fullName","nation","city","control","handleSubmit","defaultValues","toastMessage","trim","success","duration","error","onSubmit","useCallback","data","maxWidth","width","pattern","value","message","required","field","fieldState","e","onChange","target","minLength","rememberMe","margin","position","minWidth","display","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { ILoginParams, ILoginValidation, ISingupParams } from '../../../models/auth';\r\n\r\ninterface Props {\r\n    onLogin(values: ILoginParams): void;\r\n    loading: boolean;\r\n    errorMessage: string;\r\n}\r\n\r\n\r\nconst SingupForm = (props: Props) => {\r\n    const { onLogin, loading, errorMessage } = props;\r\n    const [formValues, setFormValues] = React.useState<ISingupParams>({\r\n        email: '',\r\n        password: '',\r\n        register: \"\",\r\n        fullName: \"\",\r\n        nation: \"\",\r\n        city: \"\",\r\n    });\r\n    const { control, handleSubmit } = useForm({\r\n        defaultValues: {\r\n            email: '',\r\n            password: '',\r\n            register: \"\",\r\n            fullName: \"\",\r\n            nation: \"\",\r\n            city: \"\",\r\n\r\n        }\r\n    });\r\n\r\n    // useEffect(())\r\n    function toastMessage() {\r\n        if (errorMessage.trim() === \"Login succes\") {\r\n            toast.success(\"Login sucess!\", {\r\n                duration: 2000,\r\n            })\r\n\r\n        } else {\r\n            toast.error(\"Invalid username / password\", {\r\n                duration: 1000,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const onSubmit = React.useCallback(async (data: ILoginParams) => {\r\n        await onLogin(formValues)\r\n\r\n        toastMessage()\r\n\r\n    }, [formValues]);\r\n\r\n    return (<>\r\n\r\n        <form\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            style={{ maxWidth: '560px', width: '100%' }}\r\n            className=\"row g-3 needs-validation\"\r\n        >\r\n\r\n            <Controller\r\n                name=\"email\"\r\n                control={control}\r\n                defaultValue=\"\"\r\n                rules={{\r\n                    pattern: {\r\n                        value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                        message: \"Value is not email\"\r\n                    },\r\n                    required: \"This email is required.\",\r\n                }}\r\n                render={({ field, fieldState: { error } }) => (\r\n                    <div className=\"col-md-12\">\r\n                        <label htmlFor=\"inputEmail\" className=\"form-label\">\r\n                            <FormattedMessage id=\"email\" />\r\n                        </label>\r\n                        <input\r\n                            {...field}\r\n                            type=\"text\"\r\n                            name=\"email\"\r\n                            className=\"form-control\"\r\n                            id=\"inputEmail\"\r\n                            onChange={(e) => {\r\n                                field.onChange(e);\r\n                                setFormValues({ ...formValues, email: e.target.value })\r\n                            }}\r\n                        />\r\n                        {error && <small className=\"text-danger\">\r\n                            {error.message}\r\n                        </small>}\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n            <Controller\r\n                name=\"password\"\r\n                control={control}\r\n                defaultValue=\"\"\r\n                rules={{\r\n                    minLength: {\r\n                        value: 6,\r\n                        message: \"This input must exceed 6 characters\"\r\n                    },\r\n                    required: \"This password is required.\",\r\n\r\n                }}\r\n                render={({ field, fieldState: { error } }) => (\r\n                    <div className=\"col-md-12\">\r\n                        <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                            <FormattedMessage id=\"password\" />\r\n                        </label>\r\n                        <input {...field}\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            id=\"inputPassword\"\r\n                            onChange={(e) => {\r\n\r\n                                field.onChange(e);\r\n                                setFormValues({ ...formValues, password: e.target.value })\r\n                            }}\r\n                        />\r\n                        {error && <small className=\"text-danger\">\r\n                            {error?.message}</small>}\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n            <Controller\r\n                name=\"fullName\"\r\n                control={control}\r\n\r\n                render={({ field, fieldState: { error } }) => (\r\n                    <div className=\"col-12\">\r\n                        <div className=\"form-check\">\r\n                            <input\r\n\r\n                                className=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                                id=\"invalidCheck\"\r\n\r\n                                onChange={(e) => {\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, rememberMe: !!field.value })\r\n                                }}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"invalidCheck\">\r\n                                <FormattedMessage id=\"rememberMe\" />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n\r\n            <Controller\r\n                name=\"nation\"\r\n                control={control}\r\n\r\n                render={({ field, fieldState: { error } }) => (\r\n                    <div className=\"col-12\">\r\n                        <div className=\"form-check\">\r\n                            <input\r\n\r\n                                className=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                                id=\"invalidCheck\"\r\n\r\n                            // onChange={(e) => {\r\n                            //     field.onChange(e);\r\n                            //     setFormValues({ ...formValues, rememberMe: !!field.value })\r\n                            // }}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"invalidCheck\">\r\n                                <FormattedMessage id=\"rememberMe\" />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            />\r\n\r\n            <Controller\r\n                name=\"city\"\r\n                control={control}\r\n\r\n                render={({ field, fieldState: { error } }) => (\r\n                    <div className=\"col-12\">\r\n                        <div className=\"form-check\">\r\n                            <input\r\n\r\n                                className=\"form-check-input\"\r\n                                type=\"checkbox\"\r\n                                id=\"invalidCheck\"\r\n\r\n                            // onChange={(e) => {\r\n                            //     field.onChange(e);\r\n                            //     setFormValues({ ...formValues, rememberMe: !!field.value })\r\n                            // }}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"invalidCheck\">\r\n                                <FormattedMessage id=\"rememberMe\" />\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            />\r\n            \r\n            <div className=\"row justify-content-md-center\" style={{ margin: '16px 0' }}>\r\n                <div className=\"col-md-auto\" style={{ position: \"relative\" }}>\r\n                    <button\r\n                        className=\"btn btn-primary\"\r\n                        type=\"submit\"\r\n                        style={{ minWidth: '160px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n                        disabled={loading}\r\n                        value=\"Đăng Nhập\"\r\n                    >\r\n                        {loading && <div className=\"spinner-border spinner-border-sm text-light mr-2\" role=\"status\" />}\r\n                        <FormattedMessage id=\"register\" />\r\n\r\n\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form >\r\n\r\n\r\n    </>\r\n    );\r\n};\r\n\r\nexport default SingupForm;\r\n"]},"metadata":{},"sourceType":"module"}